<?xml version="1.0" encoding="UTF-8" ?>

<Server version="8">
	<Name>OvenMediaEngine</Name>
	<!-- Host type (origin/edge) -->
	<Type>origin</Type>
	<!-- Specify IP address to bind (* means all IPs) -->
	<IP>*</IP>
	<PrivacyProtection>false</PrivacyProtection>
	<!-- 
	To get the public IP address(mapped address of stun) of the local server. 
	This is useful when OME cannot obtain a public IP from an interface, such as AWS or docker environment. 
	If this is successful, you can use ${PublicIP} in your settings.
	-->
	<StunServer>stun.ovenmediaengine.com:13478</StunServer>

	<Modules>
		<!-- 
		Currently OME only supports h2 like all browsers do. Therefore, HTTP/2 only works on TLS ports.			
		-->
		<HTTP2>
			<Enable>true</Enable>
		</HTTP2>

		<LLHLS>
			<Enable>true</Enable>
		</LLHLS>

		<!-- P2P works only in WebRTC and is experiment feature -->
		<P2P>
			<!-- disabled by default -->
			<Enable>false</Enable>
			<MaxClientPeersPerHostPeer>2</MaxClientPeersPerHostPeer>
		</P2P>
	</Modules>

	<!-- Settings for the ports to bind -->
	<Bind>
		<!-- Enable this configuration if you want to use API Server -->
		<!--
		<Managers>
			<API>
				<Port>${env:OME_API_PORT:8081}</Port>
				<WorkerCount>1</WorkerCount>
			</API>
		</Managers>
		-->
		<Providers>
			<RTMP>
				<Port>${env:OME_RTMP_PROV_PORT:1935}</Port>
				<WorkerCount>1</WorkerCount>
			</RTMP>
		</Providers>
		<Publishers>
			<WebRTC>
				<Signalling>
					<Port>${env:OME_WEBRTC_SIGNALLING_PORT:3333}</Port>
					<TLSPort>${env:OME_WEBRTC_SIGNALLING_TLS_PORT:3334}</TLSPort>
					<WorkerCount>1</WorkerCount>
				</Signalling>
				<IceCandidates>
					<IceCandidate>${env:OME_WEBRTC_CANDIDATE_IP:*}:${env:OME_WEBRTC_CANDIDATE_PORT:10000-10004/udp}</IceCandidate>
					<TcpRelay>${env:OME_WEBRTC_CANDIDATE_IP:*}:${env:OME_WEBRTC_TCP_RELAY_PORT:3478}</TcpRelay>
					<TcpForce>true</TcpForce>
					<TcpRelayWorkerCount>1</TcpRelayWorkerCount>
				</IceCandidates>
			</WebRTC>
			<Thumbnail>
				<Port>20080</Port>
			</Thumbnail>
		</Publishers>
	</Bind>

	<VirtualHosts>
		<!--
			You can include multiple XML files by doing the following:
			<VirtualHost include="sites-enabled/*.xml" />
		-->
		<VirtualHost include="VHost*.xml" />
		<VirtualHost>
			<Name>default</Name>
			<Distribution>ovenmediaengine.com</Distribution>

			<AdmissionWebhooks>
				<ControlServerUrl>http://rails:3000/update_stream</ControlServerUrl>
				<Enables>
					<Providers>rtmp</Providers>
				</Enables>
			</AdmissionWebhooks>
			
			<Host>
				<Names>
					<Name>*</Name>
				</Names>
				<TLS>
					<CertPath>cert.crt</CertPath>
					<KeyPath>cert.key</KeyPath>
					<ChainCertPath>cert.ca-bundle</ChainCertPath>
				</TLS>
			</Host>

			<CrossDomains>
				<Url>*</Url>
			</CrossDomains>

			<Applications>
				<Application>
					<Name>app</Name>
					<!-- Application type (live/vod) -->
					<Type>live</Type>
					<OutputProfiles>
						<OutputProfile>
							<Name>bypass_stream</Name>
							<OutputStreamName>${OriginStreamName}</OutputStreamName>
							<Playlist>
								<Name>For WebRTC</Name>
								<FileName>webrtc</FileName>
								<Options>
									<WebRtcAutoAbr>true</WebRtcAutoAbr>
								</Options>
								<Rendition>
									<Name>Source</Name>
									<Video>bypass_video</Video>
									<Audio>opus_audio</Audio>
								</Rendition>
								<Rendition>
									<Name>1080p60fps</Name>
									<Video>video_1080</Video>
									<Audio>opus_audio</Audio>
								</Rendition>
								<Rendition>
									<Name>720p60fps</Name>
									<Video>video_720</Video>
									<Audio>opus_audio</Audio>
								</Rendition>
							</Playlist>
							<Encodes>
								<Audio>
									<Name>bypass_audio</Name>
									<Bypass>true</Bypass>
								</Audio>
								<Audio>
									<Name>aac_audio</Name>
									<Codec>aac</Codec>
									<Bitrate>128000</Bitrate>
									<Samplerate>48000</Samplerate>
									<Channel>2</Channel>
									<BypassIfMatch>
										<Codec>eq</Codec>
									</BypassIfMatch>
								</Audio>								
								<Audio>
									<Name>opus_audio</Name>
									<Codec>opus</Codec>
									<Bitrate>128000</Bitrate>
									<Samplerate>48000</Samplerate>
									<Channel>2</Channel>
									<BypassIfMatch>
										<Codec>eq</Codec>
									</BypassIfMatch>									
								</Audio>

								<Video>
									<Name>bypass_video</Name>
									<Bypass>true</Bypass>
								</Video>
								<Video>
									<Name>video_1080</Name>
									<Codec>h264</Codec>
									<Bitrate>60000</Bitrate>
									<Framerate>60</Framerate>
									<Width>1920</Width>
									<Height>1080</Height>
									<Preset>slower</Preset>
								</Video>
								<Video>
									<Name>video_720</Name>
									<Codec>h264</Codec>
									<Bitrate>60000</Bitrate>
									<Framerate>60</Framerate>
									<Width>1280</Width>
									<Height>720</Height>
									<Preset>slower</Preset>
								</Video>
								<Image>
									<Codec>jpeg</Codec>
									<Framerate>1</Framerate>
									<Width>1280</Width>
									<Height>720</Height>
								</Image>
							</Encodes>
						</OutputProfile>
					</OutputProfiles>
					<Providers>
						<OVT />
						<WebRTC>
							<Timeout>30000</Timeout>
							<CrossDomains>
								<Url>*</Url>
							</CrossDomains>
						</WebRTC>
						<RTMP>
							<BlockDuplicateStreamName>true</BlockDuplicateStreamName>
						</RTMP>
					</Providers>
					<Publishers>
						<AppWorkerCount>1</AppWorkerCount>
						<StreamWorkerCount>8</StreamWorkerCount>
						<WebRTC>
							<Timeout>30000</Timeout>
							<Rtx>false</Rtx>
							<Ulpfec>false</Ulpfec>
							<JitterBuffer>false</JitterBuffer>
						</WebRTC>
						<Thumbnail>
							<CrossDomains>
								<Url>*</Url>
							</CrossDomains>
						</Thumbnail>
					</Publishers>
				</Application>
			</Applications>
		</VirtualHost>
	</VirtualHosts>
</Server>